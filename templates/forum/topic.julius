"use strict";

/** @type {Object.<string, string>} */
const markdowns = #{toJSON $ markdowns posts}

/** @type {Object.<string, boolean>} */
const editing = {}

/**
 * @param {HTMLButtonElement} button
 * @param {string} post
 */
function likePost(button, post) {
    button.disabled = true
    const req = new XMLHttpRequest()
    req.onreadystatechange = function() {
        if (req.readyState === XMLHttpRequest.DONE && req.status === 200) {
            /** @type {boolean} */
            const liked = JSON.parse(req.responseText)
            const display = document.getElementById("likes-" + post)
            button.innerText = liked ? "❤️" : "♡"
            const total = (display.innerText ? parseInt(display.innerText) : 0)
                          + (liked ? 1 : -1)
            display.innerText = total > 0 ? total : ""
            button.disabled = false
        }
    }
    req.open("GET", "/api/post/like/" + post)
    req.send()
}

/** @param {string} post */
function deletePost(post) {
    const req = new XMLHttpRequest()
    req.onreadystatechange = function() {
        if (req.readyState === XMLHttpRequest.DONE && req.status === 200 && JSON.parse(req.responseText))
            document.getElementById(post).remove()
    }
    req.open("GET", "/api/post/delete/" + post)
    req.send()
}

/** @param {string} post */
function editPost(post) {
    const article  = document.getElementById("body-" + post)
    const editForm = document.getElementById("edit-" + post)
    const button   = document.getElementById("button-" + post)

    if (button.innerText === "Cancel") {
        button.innerText = "Edit"
        article.style.display = "block"
        editForm.style.display = "none"
    } else {
        button.innerText = "Cancel"

        for (const child of editForm.children) {
            switch (child.getAttribute("name")) {
                case "f1":
                    child.value = post
                    break
                case "f2":
                    child.value = markdowns[post]
                    break
            }
        }

        article.style.display = "none"
        editForm.style.display = "block"
    }
}

/** @param {string} post */
function quotePost(post) {
    document.getElementsByTagName("textarea")[0].value = "> " + markdowns[post].replace("\n", "\n >")
    window.scrollTo(0,document.body.scrollHeight)
}

function deleteTopic() {
    const req = new XMLHttpRequest()
    req.onreadystatechange = function() {
        if (req.readyState === XMLHttpRequest.DONE && req.status === 200 && JSON.parse(req.responseText))
            document.location.replace("@{BoardR forumTopicBoard}")
    }
    req.open("GET", "/api/topic/delete/" + #{topicKey})
    req.send()
}

function lockTopic() {
    const req = new XMLHttpRequest()
    req.onreadystatechange = function() {
        if (req.readyState === XMLHttpRequest.DONE && req.status === 200 && JSON.parse(req.responseText))
            document.location.reload()
    }
    req.open("GET", "/api/topic/lock/" + #{topicKey})
    req.send()
}
